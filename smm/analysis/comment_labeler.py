# comment_labeler.py

import sqlite3
import pandas as pd
import random
import os
import ollama
from tqdm import tqdm

# === CONFIG ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
INPUT_DB = os.path.join(BASE_DIR, "data", "instagram_comments.db")
SUMMARY_DB = os.path.join(BASE_DIR, "data", "instagram_summaries.db")
OUTPUT_DB = os.path.join(BASE_DIR, "data", "instagram_comments_tagged.db")
OLLAMA_MODEL = "llama3.1:8b"

# === LLM CALL FUNCTION TO DETECT TOPIC ===
def call_topic_classifier(caption, comments):
    prompt = f"""
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–π —Ç–µ–º–µ –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è. –¢–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å: –ø–æ–ª–∏—Ç–∏–∫–∞, –º–∏–≥—Ä–∞—Ü–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –∫—É–ª—å—Ç—É—Ä–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∏ —Ç.–¥.

–ü–æ—Å—Ç:
"""
    prompt += caption.strip() + "\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
    for i, c in enumerate(comments[:10], 1):
        prompt += f"{i}. {c.strip()}\n"
    prompt += "\n–£–∫–∞–∂–∏ 1-2 —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."

    try:
        response = ollama.chat(
            model=OLLAMA_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ç–µ–º."},
                {"role": "user", "content": prompt}
            ]
        )
        return [t.strip().lower() for t in response['message']['content'].split(',') if t.strip()]
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–º—ã:", e)
        return ["–ø—Ä–æ—á–µ–µ"]

# === PREP OUTPUT DB ===
'''if os.path.exists(OUTPUT_DB):
    print(f"üóëÔ∏è Deleting existing database: {OUTPUT_DB}")
    os.remove(OUTPUT_DB)'''

print("üì• Loading Instagram Comments DB...")
conn = sqlite3.connect(INPUT_DB)
df = pd.read_sql("SELECT * FROM comments", conn)
conn.close()

# === GROUP BY POST AND TAG ===
print("üè∑Ô∏è Classifying topics for each post and tagging comments...")
post_groups = df.groupby("post_url")
all_tagged_rows = []

for post_url, group in tqdm(post_groups, desc="Tagging topics"):
    caption = group["post_caption"].iloc[0]
    comments = group["comment"].dropna().astype(str).tolist()
    topics = call_topic_classifier(caption, comments)

    for _, row in group.iterrows():
        row_dict = row.to_dict()
        row_dict["topics"] = ", ".join(topics)
        all_tagged_rows.append(row_dict)

# === SAVE TO NEW DB ===
print("üíæ Saving tagged comments...")
tagged_df = pd.DataFrame(all_tagged_rows)
conn_out = sqlite3.connect(OUTPUT_DB)
tagged_df.to_sql("comments", conn_out, index=False, if_exists="replace")
conn_out.close()

print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–∞–∑–º–µ—á–µ–Ω—ã —Ç–µ–º–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:", OUTPUT_DB)
