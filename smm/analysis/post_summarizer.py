# post_summarizer.py

import sqlite3
import pandas as pd
import random
import os
import ollama
from tqdm import tqdm

# === CONFIG ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
INSTAGRAM_DB = os.path.join(BASE_DIR, "data", "instagram_comments.db")
OUTPUT_DB = os.path.join(BASE_DIR, "data", "instagram_summaries.db")
PROMPT_DIR = os.path.join(BASE_DIR, "prompts")
MAX_COMMENTS = 50
OLLAMA_MODEL = "llama3.1:8b"

# === ENSURE PROMPT DIR EXISTS ===
os.makedirs(PROMPT_DIR, exist_ok=True)

# === OLLAMA CHAT FUNCTION ===
def call_llm(prompt: str, model: str = OLLAMA_MODEL) -> str:
    try:
        response = ollama.chat(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –î–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–µ –æ–±–∑–æ—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ]
        )
        return response['message']['content'].strip()
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Ollama:", e)
        return "[ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏]"

def summarize():
    # === VERIFY DB EXISTS ===
    if not os.path.exists(INSTAGRAM_DB):
        raise FileNotFoundError(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {INSTAGRAM_DB}")

    # === LOAD DATA ===
    print('Connecting to Instagram Database...')
    conn = sqlite3.connect(INSTAGRAM_DB)
    df = pd.read_sql("SELECT * FROM comments", conn)
    conn.close()

    # === GROUP BY POST ===
    post_groups = df.groupby("post_url")

    # === PREP OUTPUT DB ===
    print('Connecting to Summary Database...')
    # === CLEAN OUTPUT DB IF EXISTS ===
    if os.path.exists(OUTPUT_DB):
        print(f"üóëÔ∏è Deleting existing database: {OUTPUT_DB}")
        os.remove(OUTPUT_DB)
    out_conn = sqlite3.connect(OUTPUT_DB)
    out_cursor = out_conn.cursor()
    out_cursor.execute("""
    CREATE TABLE IF NOT EXISTS post_summaries (
        post_url TEXT PRIMARY KEY,
        caption TEXT,
        comment_count INTEGER,
        summary TEXT
    );
    """)
    out_conn.commit()

    # === LOOP THROUGH POSTS ===
    print('Starting Summary Loop...')
    for post_url, group in tqdm(post_groups, desc="Summarizing posts"):
        caption = group["post_caption"].iloc[0]
        comments = group["comment"].dropna().astype(str).tolist()
        comment_count = len(comments)

        # Limit comments to prevent overloading context window
        if len(comments) > MAX_COMMENTS:
            random.seed(42)
            comments = random.sample(comments, MAX_COMMENTS)

        # === BUILD PROMPT ===
        prompt = f"""–ü–æ—Å—Ç:
    {caption.strip()}
    
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({comment_count}):
    """
        for i, comment in enumerate(comments, 1):
            prompt += f"{i}. {comment.strip()}\n"

        prompt += """
    
    –ó–∞–¥–∞—á–∞:
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –£–∫–∞–∂–∏:
    - –û—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞
    - –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Ä–µ–∞–∫—Ü–∏—é –ª—é–¥–µ–π
    - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    
    –ë—É–¥—å—Ç–µ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã –≤ —Å–≤–æ–∏—Ö –≤—ã–≤–æ–¥–∞—Ö –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è—Ö.
    """

        # === SAVE PROMPT FOR DEBUGGING ===
        prompt_path = os.path.join(PROMPT_DIR, f"prompt_{hash(post_url)}.txt")
        with open(prompt_path, "w", encoding="utf-8") as f:
            f.write(prompt.strip())

        # === CALL OLLAMA CHAT ===
        summary = call_llm(prompt)

        # === STORE RESULT ===
        out_cursor.execute("""
            INSERT OR REPLACE INTO post_summaries (post_url, caption, comment_count, summary)
            VALUES (?, ?, ?, ?)
        """, (post_url, caption, comment_count, summary))
        out_conn.commit()

    out_conn.close()
    print("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:", OUTPUT_DB)
